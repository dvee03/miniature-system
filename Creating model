{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Creating model","version":"0.3.2","provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"TPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"A3TKefSxW3dB","colab_type":"text"},"source":["The goal  was to train a model to accurately classify and categorize images from the training set (\"unseen images\")"]},{"cell_type":"code","metadata":{"id":"kK1iGD8Uz46z","colab_type":"code","colab":{}},"source":["from google.colab import drive\n","drive.mount('/content/drive/')"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3hMTdu8c7zll","colab_type":"text"},"source":["Access libraries and imports necessary packages, using pd.read_csv to import data stored in  google drive into the system."]},{"cell_type":"code","metadata":{"id":"YBHqslx80FwE","colab_type":"code","colab":{}},"source":["import pathlib\n","import tensorflow as tf\n","import tensorflow_datasets as tfds\n","import pandas as pd\n","import numpy as np\n","data_root = pathlib.Path('/content/drive/My Drive/Dhivya_Classifier/videos')\n","data = pd.read_csv(\"/content/drive/My Drive/Dhivya_Classifier/data.csv\", names=['colA', 'colB'], error_bad_lines = False)\n","data.head"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Nt3afqFF8gfG","colab_type":"text"},"source":["Create the 3D Convolutional model made up of  layers, each followed by a batch normalization layer -  which solves the problem of incorrect predictions by normalizing the inputs, essentially preventing covariate shift - and a ReLu activation layer which allows the model to train faster.\n","\n","{Mixed _3b, Mixed _3c, MaxPool3d_4a_3x3, Mixed_4b, Mixed_4c, Mixed_4d, Mixed_4e, Mixed_4f, MaxPool2d_5a_2x2, Mixed_5b, Mixed_5c } - each \"Mixed\" layer being made up of four branches concatenated at the end of the layer\n","\n","\n","*   stride - the number of pixels by which the filter is slide over the input image to create a feature or \"output\" map of the image\n","*   MaxPooling layer - allows for easier reading of the given image by reducing the dimensions\n","\n"]},{"cell_type":"markdown","metadata":{"id":"az4pT_eROBmE","colab_type":"text"},"source":["tf.keras.layers is easy to use because the needed functions such as maxpooling3D layers can be accessed through single lines of code"]},{"cell_type":"code","metadata":{"id":"MEh7KVU_0LbY","colab_type":"code","colab":{}},"source":["img_input = tf.keras.Input(shape = (60, 20, 20, 3), name = 'img')\n","# Downsampling via convolution (spatial and temporal)\n","x = tf.keras.layers.Conv3D(64, [7, 7, 7], strides=(2, 2, 2), padding='same')(img_input)\n","x = tf.keras.layers.BatchNormalization(axis=4, scale=False)(x)\n","x = tf.keras.layers.Activation('relu')(x)\n","\n","# Downsampling (spatial only)\n","x = tf.keras.layers.MaxPooling3D((1, 3, 3), strides=(1, 2, 2), padding='same')(x)\n","\n","x = tf.keras.layers.Conv3D(64, [1,1,1], strides=(1,1,1), padding='same')(x)\n","x = tf.keras.layers.BatchNormalization(axis=4, scale=False)(x)\n","x = tf.keras.layers.Activation('relu')(x)\n","x = tf.keras.layers.Conv3D(192, [3,3,3], strides=(1,1,1), padding='same')(x)\n","x = tf.keras.layers.BatchNormalization(axis=4, scale=False)(x)\n","x = tf.keras.layers.Activation('relu')(x)\n","\n","# Downsampling (spatial only)\n","x = tf.keras.layers.MaxPooling3D((1, 3, 3), strides=(1, 2, 2), padding='same')(x)\n","#Mixed 3b\n","branch_0 = tf.keras.layers.Conv3D(64, [1,1,1], strides=(1,1,1), padding='same')(x)\n","branch_0 = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_0)\n","\n","branch_0 = tf.keras.layers.Activation('relu')(branch_0)\n","\n","branch_1 = tf.keras.layers.Conv3D(96, [1,1,1], strides=(1,1,1), padding='same')(x)\n","\n","branch_1 = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_1)\n","\n","branch_1 = tf.keras.layers.Activation('relu')(branch_1)\n","\n","branch_1 = tf.keras.layers.Conv3D(128, [3, 3, 3], strides=(1,1,1), padding='same')(branch_1)\n","\n","branch_1 = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_1)\n","\n","branch_1 = tf.keras.layers.Activation('relu')(branch_1)\n","\n","branch_2 = tf.keras.layers.Conv3D(16, [1,1,1], strides=(1,1,1), padding='same')(x)\n","\n","branch_2 = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_2)\n","\n","branch_2 = tf.keras.layers.Activation('relu')(branch_2)\n","\n","branch_2 = tf.keras.layers.Conv3D(32, [3, 3, 3], strides=(1,1,1), padding='same')(branch_2)\n","\n","branch_2 = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_2)\n","\n","branch_2 = tf.keras.layers.Activation('relu')(branch_2)\n","\n","branch_3 = tf.keras.layers.MaxPooling3D((3, 3, 3), strides=(1, 1, 1), padding='same', name='MaxPool2d_3b_3a_3x3')(x)\n","\n","branch_3 = tf.keras.layers.Conv3D(32, [1,1,1], strides=(1,1,1), padding='same')(branch_3)\n","\n","branch_3 = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_3)\n","\n","branch_3 = tf.keras.layers.Activation('relu')(branch_3)\n","x = tf.keras.layers.concatenate([branch_0, branch_1, branch_2, branch_3],axis=4)\n","\n","\n","#Mixed 3c\n","\n","branch_03c = tf.keras.layers.Conv3D(128, [1,1,1], strides=(1,1,1), padding='same')(x)\n","\n","branch_03c = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_03c)\n","\n","branch_03c = tf.keras.layers.Activation('relu')(branch_03c)\n","\n","branch_13c = tf.keras.layers.Conv3D(128, [1,1,1], strides=(1,1,1), padding='same')(x)\n","\n","branch_13c = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_13c)\n","\n","branch_13c = tf.keras.layers.Activation('relu')(branch_13c)\n","\n","branch_13c = tf.keras.layers.Conv3D(192, [3, 3, 3], strides=(1,1,1), padding='same')(branch_13c)\n","\n","branch_13c = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_13c)\n","\n","branch_13c = tf.keras.layers.Activation('relu')(branch_13c)\n","\n","branch_23c = tf.keras.layers.Conv3D(32, [1,1,1], strides=(1,1,1), padding='same')(x)\n","\n","branch_23c = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_23c)\n","\n","branch_23c = tf.keras.layers.Activation('relu')(branch_23c)\n","\n","branch_23c = tf.keras.layers.Conv3D(96, [3, 3, 3], strides=(1,1,1), padding='same')(branch_23c)\n","\n","branch_23c = tf.keras.layers.Activation('relu')(branch_23c)\n","\n","branch_33c = tf.keras.layers.MaxPooling3D((3, 3, 3), strides=(1, 1, 1), padding='same', name='MaxPool2d_3c_3a_3x3')(x)\n","\n","branch_33c = tf.keras.layers.Conv3D(64, [1,1,1], strides=(1,1,1), padding='same')(branch_33c)\n","\n","branch_33c = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_33c)\n","\n","branch_33c = tf.keras.layers.Activation('relu')(branch_33c)\n","\n","x3c = tf.keras.layers.concatenate([branch_03c, branch_13c, branch_23c, branch_33c],axis=4)\n","\n","#MaxPool3d_4a_3x3\n","\n","maxPool3 = tf.keras.layers.MaxPooling3D((3, 3, 3), strides=(2, 2, 2), padding='same')(x3c)\n","\n","#Mixed_4b\n","\n","branch_04b = tf.keras.layers.Conv3D(192, [1,1,1], strides=(1,1,1), padding='same')(maxPool3)\n","\n","branch_04b = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_04b)\n","\n","branch_04b = tf.keras.layers.Activation('relu')(branch_04b)\n","\n","branch_14b = tf.keras.layers.Conv3D(96, [1,1,1], strides=(1,1,1), padding='same')(maxPool3)\n","\n","branch_14b = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_14b)\n","\n","branch_14b = tf.keras.layers.Activation('relu')(branch_14b)\n","\n","branch_14b = tf.keras.layers.Conv3D(208, [3, 3, 3], strides=(1,1,1), padding='same')(branch_14b)\n","\n","branch_14b = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_14b)\n","\n","branch_14b = tf.keras.layers.Activation('relu')(branch_14b)\n","\n","branch_24b = tf.keras.layers.Conv3D(16, [1,1,1], strides=(1,1,1), padding='same')(maxPool3)\n","\n","branch_24b = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_24b)\n","\n","branch_24b = tf.keras.layers.Activation('relu')(branch_24b)\n","\n","branch_24b = tf.keras.layers.Conv3D(48, [3, 3, 3], strides=(1,1,1), padding='same')(branch_24b)\n","\n","branch_24b = tf.keras.layers.Activation('relu')(branch_24b)\n","\n","branch_34b = tf.keras.layers.MaxPooling3D((3, 3, 3), strides=(1, 1, 1), padding='same', name='MaxPool2d_4b_3a_3x3')(maxPool3)\n","\n","branch_34b = tf.keras.layers.Conv3D(64, [1,1,1], strides=(1,1,1), padding='same')(branch_34b)\n","\n","branch_34b = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_34b)\n","\n","branch_34b = tf.keras.layers.Activation('relu')(branch_34b)\n","\n","x4b = tf.keras.layers.concatenate([branch_04b, branch_14b, branch_24b, branch_34b],axis=4)\n","\n","#Mixed_4c\n","\n","branch_04c = tf.keras.layers.Conv3D(160, [1,1,1], strides=(1,1,1), padding='same')(x4b)\n","\n","branch_04c = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_04c)\n","\n","branch_04c = tf.keras.layers.Activation('relu')(branch_04c)\n","\n","branch_14c = tf.keras.layers.Conv3D(112, [1,1,1], strides=(1,1,1), padding='same')(x4b)\n","\n","branch_14c = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_14c)\n","\n","branch_14c = tf.keras.layers.Activation('relu')(branch_14c)\n","\n","branch_14c = tf.keras.layers.Conv3D(224, [3, 3, 3], strides=(1,1,1), padding='same')(branch_14c)\n","\n","branch_14c = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_14c)\n","\n","branch_14c = tf.keras.layers.Activation('relu')(branch_14c)\n","\n","branch_24c = tf.keras.layers.Conv3D(24, [1,1,1], strides=(1,1,1), padding='same')(x4b)\n","\n","branch_24c = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_24c)\n","\n","branch_24c = tf.keras.layers.Activation('relu')(branch_24c)\n","\n","branch_24c = tf.keras.layers.Conv3D(36, [3, 3, 3], strides=(1,1,1), padding='same')(branch_24c)\n","\n","branch_24c = tf.keras.layers.Activation('relu')(branch_24c)\n","\n","branch_34c = tf.keras.layers.MaxPooling3D((3, 3, 3), strides=(1, 1, 1), padding='same', name='MaxPool2d_4c_3a_3x3')(x4b)\n","\n","branch_34c = tf.keras.layers.Conv3D(64, [1,1,1], strides=(1,1,1), padding='same')(branch_34c)\n","\n","branch_34c = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_34c)\n","\n","branch_34c = tf.keras.layers.Activation('relu')(branch_34c)\n","\n","x4c = tf.keras.layers.concatenate([branch_04c, branch_14c, branch_24c, branch_34c],axis=4)\n","\n","#Mixed_4d\n","\n","branch_04d = tf.keras.layers.Conv3D(160, [1,1,1], strides=(1,1,1), padding='same')(x4c)\n","\n","branch_04d = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_04d)\n","\n","branch_04d = tf.keras.layers.Activation('relu')(branch_04d)\n","\n","branch_14d = tf.keras.layers.Conv3D(112, [1,1,1], strides=(1,1,1), padding='same')(x4c)\n","\n","branch_14d = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_14d)\n","\n","branch_14d = tf.keras.layers.Activation('relu')(branch_14d)\n","\n","branch_14d = tf.keras.layers.Conv3D(224, [3, 3, 3], strides=(1,1,1), padding='same')(branch_14d)\n","\n","branch_14d = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_14d)\n","\n","branch_14d = tf.keras.layers.Activation('relu')(branch_14d)\n","\n","branch_24d = tf.keras.layers.Conv3D(24, [1,1,1], strides=(1,1,1), padding='same')(x4c)\n","\n","branch_24d = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_24d)\n","\n","branch_24d = tf.keras.layers.Activation('relu')(branch_24d)\n","\n","branch_24d = tf.keras.layers.Conv3D(36, [3, 3, 3], strides=(1,1,1), padding='same')(branch_24d)\n","\n","branch_24d = tf.keras.layers.Activation('relu')(branch_24d)\n","\n","branch_34d = tf.keras.layers.MaxPooling3D((3, 3, 3), strides=(1, 1, 1), padding='same', name='MaxPool2d_4d_3a_3x3')(x4c)\n","\n","branch_34d = tf.keras.layers.Conv3D(64, [1,1,1], strides=(1,1,1), padding='same')(branch_34d)\n","\n","branch_34d = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_34d)\n","\n","branch_34d = tf.keras.layers.Activation('relu')(branch_34d)\n","\n","x4d = tf.keras.layers.concatenate([branch_04d, branch_14d, branch_24d, branch_34d],axis=4)\n","\n","#Mixed_4e\n","\n","branch_04e = tf.keras.layers.Conv3D(112, [1,1,1], strides=(1,1,1), padding='same')(x4d)\n","\n","branch_04e = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_04e)\n","\n","branch_04e = tf.keras.layers.Activation('relu')(branch_04e)\n","\n","branch_14e = tf.keras.layers.Conv3D(144, [1,1,1], strides=(1,1,1), padding='same')(x4d)\n","\n","branch_14e = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_14e)\n","\n","branch_14e = tf.keras.layers.Activation('relu')(branch_14e)\n","\n","branch_14e = tf.keras.layers.Conv3D(288, [3, 3, 3], strides=(1,1,1), padding='same')(branch_14e)\n","\n","branch_14e = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_14e)\n","\n","branch_14e = tf.keras.layers.Activation('relu')(branch_14e)\n","\n","branch_24e = tf.keras.layers.Conv3D(32, [1,1,1], strides=(1,1,1), padding='same')(x4d)\n","\n","branch_24e = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_24e)\n","\n","branch_24e = tf.keras.layers.Activation('relu')(branch_24e)\n","\n","branch_24e = tf.keras.layers.Conv3D(64, [3, 3, 3], strides=(1,1,1), padding='same')(branch_24e)\n","\n","branch_24e = tf.keras.layers.Activation('relu')(branch_24e)\n","\n","branch_34e = tf.keras.layers.MaxPooling3D((3, 3, 3), strides=(1, 1, 1), padding='same', name='MaxPool2d_4e_3a_3x3')(x4d)\n","\n","branch_34e = tf.keras.layers.Conv3D(64, [1,1,1], strides=(1,1,1), padding='same')(branch_34e)\n","\n","branch_34e = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_34e)\n","\n","branch_34e = tf.keras.layers.Activation('relu')(branch_34e)\n","\n","x4e = tf.keras.layers.concatenate([branch_04e, branch_14e, branch_24e, branch_34e],axis=4)\n","\n","#Mixed_4f\n","\n","branch_04f = tf.keras.layers.Conv3D(256, [1,1,1], strides=(1,1,1), padding='same')(x4e)\n","\n","branch_04f = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_04f)\n","\n","branch_04f = tf.keras.layers.Activation('relu')(branch_04f)\n","\n","branch_14f = tf.keras.layers.Conv3D(160, [1,1,1], strides=(1,1,1), padding='same')(x4e)\n","\n","branch_14f = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_14f)\n","\n","branch_14f = tf.keras.layers.Activation('relu')(branch_14f)\n","\n","branch_14f = tf.keras.layers.Conv3D(320, [3, 3, 3], strides=(1,1,1), padding='same')(branch_14f)\n","\n","branch_14f = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_14f)\n","\n","branch_14f = tf.keras.layers.Activation('relu')(branch_14f)\n","\n","branch_24f = tf.keras.layers.Conv3D(32, [1,1,1], strides=(1,1,1), padding='same')(x4e)\n","\n","branch_24f = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_24f)\n","\n","branch_24f = tf.keras.layers.Activation('relu')(branch_24f)\n","\n","branch_24f = tf.keras.layers.Conv3D(128, [3, 3, 3], strides=(1,1,1), padding='same')(branch_24f)\n","\n","branch_24f = tf.keras.layers.Activation('relu')(branch_24f)\n","\n","branch_34f = tf.keras.layers.MaxPooling3D((3, 3, 3), strides=(1, 1, 1), padding='same', name='MaxPool2d_4f_3a_3x3')(x4e)\n","\n","branch_34f = tf.keras.layers.Conv3D(128, [1,1,1], strides=(1,1,1), padding='same')(branch_34f)\n","\n","branch_34f = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_34f)\n","\n","branch_34f = tf.keras.layers.Activation('relu')(branch_34f)\n","\n","x4f = tf.keras.layers.concatenate([branch_04f, branch_14f, branch_24f,branch_34f],axis=4)\n","\n","#'MaxPool2d_5a_2x2'\n","\n","maxPool4 = tf.keras.layers.MaxPooling3D((2, 2, 2), strides=(2, 2, 2), padding='same')(x4f)\n","\n","#Mixed_5b\n","\n","branch_05b = tf.keras.layers.Conv3D(256, [1,1,1], strides=(1,1,1), padding='same')(maxPool4)\n","\n","branch_05b = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_05b)\n","\n","branch_05b = tf.keras.layers.Activation('relu')(branch_05b)\n","\n","branch_15b = tf.keras.layers.Conv3D(160, [1,1,1], strides=(1,1,1), padding='same')(maxPool4)\n","\n","branch_15b = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_15b)\n","\n","branch_15b = tf.keras.layers.Activation('relu')(branch_15b)\n","\n","branch_15b = tf.keras.layers.Conv3D(320, [3, 3, 3], strides=(1,1,1), padding='same')(branch_15b)\n","\n","branch_15b = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_15b)\n","\n","branch_15b = tf.keras.layers.Activation('relu')(branch_15b)\n","\n","branch_25b = tf.keras.layers.Conv3D(32, [1,1,1], strides=(1,1,1), padding='same')(maxPool4)\n","\n","branch_25b = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_25b)\n","\n","branch_25b = tf.keras.layers.Activation('relu')(branch_25b)\n","\n","branch_25b = tf.keras.layers.Conv3D(128, [3, 3, 3], strides=(1,1,1), padding='same')(branch_25b)\n","\n","branch_25b = tf.keras.layers.Activation('relu')(branch_25b)\n","\n","branch_35b = tf.keras.layers.MaxPooling3D((3, 3, 3), strides=(1, 1, 1), padding='same', name='MaxPool2d_5b_3a_3x3')(maxPool4)\n","\n","branch_35b = tf.keras.layers.Conv3D(128, [1,1,1], strides=(1,1,1), padding='same')(branch_35b)\n","\n","branch_35b = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_35b)\n","\n","branch_35b = tf.keras.layers.Activation('relu')(branch_35b)\n","\n","x5b = tf.keras.layers.concatenate([branch_05b, branch_15b, branch_25b,branch_35b],axis=4)\n","\n","#Mixed_5c\n","\n","branch_05c = tf.keras.layers.Conv3D(384, [1,1,1], strides=(1,1,1), padding='same')(x5b)\n","\n","branch_05c = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_05c)\n","\n","branch_05c = tf.keras.layers.Activation('relu')(branch_05c)\n","\n","branch_15c = tf.keras.layers.Conv3D(192, [1,1,1], strides=(1,1,1), padding='same')(x5b)\n","\n","branch_15c = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_15c)\n","\n","branch_15c = tf.keras.layers.Activation('relu')(branch_15c)\n","\n","branch_15c = tf.keras.layers.Conv3D(384, [3, 3, 3], strides=(1,1,1), padding='same')(branch_15c)\n","\n","branch_15c = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_15c)\n","\n","branch_15c = tf.keras.layers.Activation('relu')(branch_15c)\n","\n","branch_25c = tf.keras.layers.Conv3D(48, [1,1,1], strides=(1,1,1), padding='same')(x5b)\n","\n","branch_25c = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_25c)\n","\n","branch_25c = tf.keras.layers.Activation('relu')(branch_25c)\n","\n","branch_25c = tf.keras.layers.Conv3D(128, [3, 3, 3], strides=(1,1,1), padding='same')(branch_25c)\n","\n","branch_25c = tf.keras.layers.Activation('relu')(branch_25c)\n","\n","branch_35c = tf.keras.layers.MaxPooling3D((3, 3, 3), strides=(1, 1, 1), padding='same', name='MaxPool2d_5c_3a_3x3')(x5b)\n","\n","branch_35c = tf.keras.layers.Conv3D(128, [1,1,1], strides=(1,1,1), padding='same')(branch_35c)\n","\n","branch_35c = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_35c)\n","\n","branch_35c = tf.keras.layers.Activation('relu')(branch_35c)\n","\n","x5c = tf.keras.layers.concatenate([branch_05c, branch_15c, branch_25c,branch_35c],axis=4)\n","\n","#AveragePooling\n","\n","avgPool1 = tf.keras.layers.AveragePooling3D((2, 7, 7), strides=(1, 1, 1), padding='same')(x5c)\n","\n","#Conv_1x1\n","\n","convFinal = tf.keras.layers.Conv3D(64, [1,1,1], strides=(1,1,1), padding='same')(avgPool1)\n","\n","convFinal = tf.keras.layers.BatchNormalization(axis=4, scale=False)(convFinal)\n","\n","convFinal = tf.keras.layers.Activation('relu')(convFinal)\n","predictions = tf.keras.layers.Dense(10, activation = 'softmax', name = 'prediction')(convFinal)\n","model = tf.keras.Model(inputs = img_input, outputs = predictions)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"R1PKWzaGFofE","colab_type":"text"},"source":["Compiles the model \n","*   loss variable - calculates the error at the output layer\n","\n"]},{"cell_type":"code","metadata":{"id":"B9j_K3f20TgF","colab_type":"code","colab":{}},"source":["model.compile(optimizer = tf.train.RMSPropOptimizer(0.001), loss = 'categorical_crossentropy', metrics = ['accuracy'])"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hRp8wqtXK8pK","colab_type":"text"},"source":["Convert files to .npz  in order to pass in the input data"]},{"cell_type":"code","metadata":{"id":"6JCGx46a0ZH6","colab_type":"code","colab":{}},"source":["npzArray = []\n","for row in data['colA']:\n","  row =  '/content/drive/My Drive/Dhivya_Classifier/videos/' + row.rstrip('/') + '.npz'\n","  npzArray.append(row)\n","  loaded = np.load(row)\n","print(npzArray)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"N6dmjfcwQRc2","colab_type":"text"},"source":["Create methods which will be called later in the code:\n","*   parse_file - opens the files located in a filename, and parses the data \n","*   load_preprocess_image - creates a dataset which contains elements made up of slices of tensors"]},{"cell_type":"code","metadata":{"id":"1E-HoYyl0abc","colab_type":"code","colab":{}},"source":["def parse_file(f):\n","  loaded = np.load(f)\n","  return loaded['arr_0']\n","def load_and_preprocess_image(path, label):\n","  var1 = tf.py_func(parse_file, [path], [tf.int64])\n","  return tf.data.Dataset.from_tensor_slices(var1), tf.keras.utils.to_categorical(label, num_classes=10)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Kvtn6jSL0mvO","colab_type":"code","colab":{}},"source":["paths = {'paths': npzArray}\n","path_ds = tf.data.Dataset.from_tensor_slices(npzArray)\n","sample = path_ds.take(1)\n","path_ds"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"r7Ed5xld0yKb","colab_type":"code","colab":{}},"source":["ds  = tf.data.Dataset.from_tensor_slices((npzArray, data['colB']))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"__u6q31x03LZ","colab_type":"code","colab":{}},"source":["image_ds = ds.map(load_and_preprocess_image)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dH_kvKy2HinK","colab_type":"text"},"source":["Creates input pipeline , using \"AUTOTUNE\" to automatically tune the data"]},{"cell_type":"code","metadata":{"id":"Jb4ERlrD08ul","colab_type":"code","colab":{}},"source":["AUTOTUNE = tf.data.experimental.AUTOTUNE\n","image_count = len(npzArray)\n","ds = image_ds.shuffle(buffer_size= image_count)\n","ds = ds.repeat()\n","ds = ds.prefetch(buffer_size=AUTOTUNE)\n","ds"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UoupBGDdGcJU","colab_type":"text"},"source":["Train the model for the number of iterations through the dataset (in this case 1), represented as \"epochs\" "]},{"cell_type":"code","metadata":{"id":"p63ZFD4V1xm_","colab_type":"code","colab":{}},"source":["model.fit(ds, epochs = 1, steps_per_epoch = 10)"],"execution_count":0,"outputs":[]}]}