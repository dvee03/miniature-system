{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Model--Works","version":"0.3.2","provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"kK1iGD8Uz46z","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":122},"outputId":"dcd35d44-abb6-4db6-909c-c1af02ff8396","executionInfo":{"status":"ok","timestamp":1564522923720,"user_tz":300,"elapsed":45296,"user":{"displayName":"Yogurt 494","photoUrl":"","userId":"00985675351945098911"}}},"source":["from google.colab import drive\n","drive.mount('/content/drive/')"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&scope=email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdocs.test%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.photos.readonly%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fpeopleapi.readonly&response_type=code\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive/\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"YBHqslx80FwE","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":578},"outputId":"b9be5569-3c37-4682-fcce-3b36f71a5199","executionInfo":{"status":"ok","timestamp":1564522941024,"user_tz":300,"elapsed":2934,"user":{"displayName":"Yogurt 494","photoUrl":"","userId":"00985675351945098911"}}},"source":["import pathlib\n","import tensorflow as tf\n","import tensorflow_datasets as tfds\n","import pandas as pd\n","import numpy as np\n","data_root = pathlib.Path(\"/content/drive/My Drive/Colab Notebooks/Dhivya_Classifier/videos/\")\n","data = pd.read_csv(\"/content/drive/My Drive/Colab Notebooks/Dhivya_Classifier/data.csv\", names=['colA', 'colB'], error_bad_lines = False)\n","data.head"],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<bound method NDFrame.head of                   colA  colB\n","0    Video_25/RGB/481/     0\n","1    Video_27/RGB/147/     0\n","2    Video_30/RGB/299/     0\n","3    Video_30/RGB/300/     0\n","4    Video_42/RGB/367/     2\n","5    Video_42/RGB/395/     2\n","6   Video_100/RGB/683/     2\n","7   Video_100/RGB/711/     2\n","8   Video_791/RGB/478/     3\n","9      Video_19/RGB/5/     3\n","10    Video_20/RGB/16/     3\n","11    Video_20/RGB/19/     3\n","12    Video_136/RGB/6/     4\n","13   Video_136/RGB/80/     4\n","14  Video_137/RGB/128/     4\n","15   Video_137/RGB/13/     4\n","16  Video_729/RGB/930/     5\n","17   Video_25/RGB/450/     5\n","18    Video_25/RGB/52/     5\n","19    Video_45/RGB/35/     5\n","20  Video_310/RGB/470/     6\n","21    Video_311/RGB/5/     6\n","22   Video_313/RGB/12/     6\n","23   Video_313/RGB/42/     6\n","24  Video_103/RGB/705/     7\n","25  Video_112/RGB/315/     7\n","26  Video_116/RGB/163/     7\n","27  Video_116/RGB/495/     7\n","28   Video_227/RGB/90/     8\n","29  Video_228/RGB/145/     8\n","30  Video_228/RGB/155/     8\n","31  Video_228/RGB/159/     8>"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"PpRdRnCa0KmK","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":105},"outputId":"2e212b2e-747b-47b3-fada-ce93c71e7416","executionInfo":{"status":"ok","timestamp":1564522944713,"user_tz":300,"elapsed":810,"user":{"displayName":"Yogurt 494","photoUrl":"","userId":"00985675351945098911"}}},"source":["img_input = tf.keras.Input(shape = (60, 20, 20, 3), name = 'img')\n","# Downsampling via convolution (spatial and temporal)\n","x = tf.keras.layers.Conv3D(64, [7, 7, 7], strides=(2, 2, 2), padding='same')(img_input)\n","x = tf.keras.layers.BatchNormalization(axis=4, scale=False)(x)\n","x = tf.keras.layers.Activation('relu')(x)\n","\n","# Downsampling (spatial only)\n","x = tf.keras.layers.MaxPooling3D((1, 3, 3), strides=(1, 2, 2), padding='same')(x)\n","\n","x = tf.keras.layers.Conv3D(64, [1,1,1], strides=(1,1,1), padding='same')(x)\n","x = tf.keras.layers.BatchNormalization(axis=4, scale=False)(x)\n","x = tf.keras.layers.Activation('relu')(x)\n","x = tf.keras.layers.Conv3D(192, [3,3,3], strides=(1,1,1), padding='same')(x)\n","x = tf.keras.layers.BatchNormalization(axis=4, scale=False)(x)\n","x = tf.keras.layers.Activation('relu')(x)\n","\n","# Downsampling (spatial only)\n","x = tf.keras.layers.MaxPooling3D((1, 3, 3), strides=(1, 2, 2), padding='same')(x)"],"execution_count":4,"outputs":[{"output_type":"stream","text":["WARNING: Logging before flag parsing goes to stderr.\n","W0730 21:42:22.455718 140656971237248 deprecation.py:506] From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/init_ops.py:1251: calling VarianceScaling.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Call initializer instance with the dtype argument instead of passing it to the constructor\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"MEh7KVU_0LbY","colab_type":"code","colab":{}},"source":["img_input = tf.keras.Input(shape = (60, 20, 20, 3), name = 'img')\n","# Downsampling via convolution (spatial and temporal)\n","x = tf.keras.layers.Conv3D(64, [7, 7, 7], strides=(2, 2, 2), padding='same')(img_input)\n","x = tf.keras.layers.BatchNormalization(axis=4, scale=False)(x)\n","x = tf.keras.layers.Activation('relu')(x)\n","\n","# Downsampling (spatial only)\n","x = tf.keras.layers.MaxPooling3D((1, 3, 3), strides=(1, 2, 2), padding='same')(x)\n","\n","x = tf.keras.layers.Conv3D(64, [1,1,1], strides=(1,1,1), padding='same')(x)\n","x = tf.keras.layers.BatchNormalization(axis=4, scale=False)(x)\n","x = tf.keras.layers.Activation('relu')(x)\n","x = tf.keras.layers.Conv3D(192, [3,3,3], strides=(1,1,1), padding='same')(x)\n","x = tf.keras.layers.BatchNormalization(axis=4, scale=False)(x)\n","x = tf.keras.layers.Activation('relu')(x)\n","\n","# Downsampling (spatial only)\n","x = tf.keras.layers.MaxPooling3D((1, 3, 3), strides=(1, 2, 2), padding='same')(x)\n","#Mixed 3b\n","branch_0 = tf.keras.layers.Conv3D(64, [1,1,1], strides=(1,1,1), padding='same')(x)\n","branch_0 = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_0)\n","\n","branch_0 = tf.keras.layers.Activation('relu')(branch_0)\n","\n","branch_1 = tf.keras.layers.Conv3D(96, [1,1,1], strides=(1,1,1), padding='same')(x)\n","\n","branch_1 = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_1)\n","\n","branch_1 = tf.keras.layers.Activation('relu')(branch_1)\n","\n","branch_1 = tf.keras.layers.Conv3D(128, [3, 3, 3], strides=(1,1,1), padding='same')(branch_1)\n","\n","branch_1 = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_1)\n","\n","branch_1 = tf.keras.layers.Activation('relu')(branch_1)\n","\n","branch_2 = tf.keras.layers.Conv3D(16, [1,1,1], strides=(1,1,1), padding='same')(x)\n","\n","branch_2 = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_2)\n","\n","branch_2 = tf.keras.layers.Activation('relu')(branch_2)\n","\n","branch_2 = tf.keras.layers.Conv3D(32, [3, 3, 3], strides=(1,1,1), padding='same')(branch_2)\n","\n","branch_2 = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_2)\n","\n","branch_2 = tf.keras.layers.Activation('relu')(branch_2)\n","\n","branch_3 = tf.keras.layers.MaxPooling3D((3, 3, 3), strides=(1, 1, 1), padding='same', name='MaxPool2d_3b_3a_3x3')(x)\n","\n","branch_3 = tf.keras.layers.Conv3D(32, [1,1,1], strides=(1,1,1), padding='same')(branch_3)\n","\n","branch_3 = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_3)\n","\n","branch_3 = tf.keras.layers.Activation('relu')(branch_3)\n","x = tf.keras.layers.concatenate([branch_0, branch_1, branch_2, branch_3],axis=4)\n","\n","\n","#Mixed 3c\n","\n","branch_03c = tf.keras.layers.Conv3D(128, [1,1,1], strides=(1,1,1), padding='same')(x)\n","\n","branch_03c = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_03c)\n","\n","branch_03c = tf.keras.layers.Activation('relu')(branch_03c)\n","\n","branch_13c = tf.keras.layers.Conv3D(128, [1,1,1], strides=(1,1,1), padding='same')(x)\n","\n","branch_13c = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_13c)\n","\n","branch_13c = tf.keras.layers.Activation('relu')(branch_13c)\n","\n","branch_13c = tf.keras.layers.Conv3D(192, [3, 3, 3], strides=(1,1,1), padding='same')(branch_13c)\n","\n","branch_13c = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_13c)\n","\n","branch_13c = tf.keras.layers.Activation('relu')(branch_13c)\n","\n","branch_23c = tf.keras.layers.Conv3D(32, [1,1,1], strides=(1,1,1), padding='same')(x)\n","\n","branch_23c = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_23c)\n","\n","branch_23c = tf.keras.layers.Activation('relu')(branch_23c)\n","\n","branch_23c = tf.keras.layers.Conv3D(96, [3, 3, 3], strides=(1,1,1), padding='same')(branch_23c)\n","\n","branch_23c = tf.keras.layers.Activation('relu')(branch_23c)\n","\n","branch_33c = tf.keras.layers.MaxPooling3D((3, 3, 3), strides=(1, 1, 1), padding='same', name='MaxPool2d_3c_3a_3x3')(x)\n","\n","branch_33c = tf.keras.layers.Conv3D(64, [1,1,1], strides=(1,1,1), padding='same')(branch_33c)\n","\n","branch_33c = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_33c)\n","\n","branch_33c = tf.keras.layers.Activation('relu')(branch_33c)\n","\n","x3c = tf.keras.layers.concatenate([branch_03c, branch_13c, branch_23c, branch_33c],axis=4)\n","\n","#MaxPool3d_4a_3x3\n","\n","maxPool3 = tf.keras.layers.MaxPooling3D((3, 3, 3), strides=(2, 2, 2), padding='same')(x3c)\n","\n","#Mixed_4b\n","\n","branch_04b = tf.keras.layers.Conv3D(192, [1,1,1], strides=(1,1,1), padding='same')(maxPool3)\n","\n","branch_04b = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_04b)\n","\n","branch_04b = tf.keras.layers.Activation('relu')(branch_04b)\n","\n","branch_14b = tf.keras.layers.Conv3D(96, [1,1,1], strides=(1,1,1), padding='same')(maxPool3)\n","\n","branch_14b = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_14b)\n","\n","branch_14b = tf.keras.layers.Activation('relu')(branch_14b)\n","\n","branch_14b = tf.keras.layers.Conv3D(208, [3, 3, 3], strides=(1,1,1), padding='same')(branch_14b)\n","\n","branch_14b = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_14b)\n","\n","branch_14b = tf.keras.layers.Activation('relu')(branch_14b)\n","\n","branch_24b = tf.keras.layers.Conv3D(16, [1,1,1], strides=(1,1,1), padding='same')(maxPool3)\n","\n","branch_24b = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_24b)\n","\n","branch_24b = tf.keras.layers.Activation('relu')(branch_24b)\n","\n","branch_24b = tf.keras.layers.Conv3D(48, [3, 3, 3], strides=(1,1,1), padding='same')(branch_24b)\n","\n","branch_24b = tf.keras.layers.Activation('relu')(branch_24b)\n","\n","branch_34b = tf.keras.layers.MaxPooling3D((3, 3, 3), strides=(1, 1, 1), padding='same', name='MaxPool2d_4b_3a_3x3')(maxPool3)\n","\n","branch_34b = tf.keras.layers.Conv3D(64, [1,1,1], strides=(1,1,1), padding='same')(branch_34b)\n","\n","branch_34b = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_34b)\n","\n","branch_34b = tf.keras.layers.Activation('relu')(branch_34b)\n","\n","x4b = tf.keras.layers.concatenate([branch_04b, branch_14b, branch_24b, branch_34b],axis=4)\n","\n","#Mixed_4c\n","\n","branch_04c = tf.keras.layers.Conv3D(160, [1,1,1], strides=(1,1,1), padding='same')(x4b)\n","\n","branch_04c = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_04c)\n","\n","branch_04c = tf.keras.layers.Activation('relu')(branch_04c)\n","\n","branch_14c = tf.keras.layers.Conv3D(112, [1,1,1], strides=(1,1,1), padding='same')(x4b)\n","\n","branch_14c = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_14c)\n","\n","branch_14c = tf.keras.layers.Activation('relu')(branch_14c)\n","\n","branch_14c = tf.keras.layers.Conv3D(224, [3, 3, 3], strides=(1,1,1), padding='same')(branch_14c)\n","\n","branch_14c = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_14c)\n","\n","branch_14c = tf.keras.layers.Activation('relu')(branch_14c)\n","\n","branch_24c = tf.keras.layers.Conv3D(24, [1,1,1], strides=(1,1,1), padding='same')(x4b)\n","\n","branch_24c = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_24c)\n","\n","branch_24c = tf.keras.layers.Activation('relu')(branch_24c)\n","\n","branch_24c = tf.keras.layers.Conv3D(36, [3, 3, 3], strides=(1,1,1), padding='same')(branch_24c)\n","\n","branch_24c = tf.keras.layers.Activation('relu')(branch_24c)\n","\n","branch_34c = tf.keras.layers.MaxPooling3D((3, 3, 3), strides=(1, 1, 1), padding='same', name='MaxPool2d_4c_3a_3x3')(x4b)\n","\n","branch_34c = tf.keras.layers.Conv3D(64, [1,1,1], strides=(1,1,1), padding='same')(branch_34c)\n","\n","branch_34c = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_34c)\n","\n","branch_34c = tf.keras.layers.Activation('relu')(branch_34c)\n","\n","x4c = tf.keras.layers.concatenate([branch_04c, branch_14c, branch_24c, branch_34c],axis=4)\n","\n","#Mixed_4d\n","\n","branch_04d = tf.keras.layers.Conv3D(160, [1,1,1], strides=(1,1,1), padding='same')(x4c)\n","\n","branch_04d = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_04d)\n","\n","branch_04d = tf.keras.layers.Activation('relu')(branch_04d)\n","\n","branch_14d = tf.keras.layers.Conv3D(112, [1,1,1], strides=(1,1,1), padding='same')(x4c)\n","\n","branch_14d = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_14d)\n","\n","branch_14d = tf.keras.layers.Activation('relu')(branch_14d)\n","\n","branch_14d = tf.keras.layers.Conv3D(224, [3, 3, 3], strides=(1,1,1), padding='same')(branch_14d)\n","\n","branch_14d = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_14d)\n","\n","branch_14d = tf.keras.layers.Activation('relu')(branch_14d)\n","\n","branch_24d = tf.keras.layers.Conv3D(24, [1,1,1], strides=(1,1,1), padding='same')(x4c)\n","\n","branch_24d = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_24d)\n","\n","branch_24d = tf.keras.layers.Activation('relu')(branch_24d)\n","\n","branch_24d = tf.keras.layers.Conv3D(36, [3, 3, 3], strides=(1,1,1), padding='same')(branch_24d)\n","\n","branch_24d = tf.keras.layers.Activation('relu')(branch_24d)\n","\n","branch_34d = tf.keras.layers.MaxPooling3D((3, 3, 3), strides=(1, 1, 1), padding='same', name='MaxPool2d_4d_3a_3x3')(x4c)\n","\n","branch_34d = tf.keras.layers.Conv3D(64, [1,1,1], strides=(1,1,1), padding='same')(branch_34d)\n","\n","branch_34d = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_34d)\n","\n","branch_34d = tf.keras.layers.Activation('relu')(branch_34d)\n","\n","x4d = tf.keras.layers.concatenate([branch_04d, branch_14d, branch_24d, branch_34d],axis=4)\n","\n","#Mixed_4e\n","\n","branch_04e = tf.keras.layers.Conv3D(112, [1,1,1], strides=(1,1,1), padding='same')(x4d)\n","\n","branch_04e = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_04e)\n","\n","branch_04e = tf.keras.layers.Activation('relu')(branch_04e)\n","\n","branch_14e = tf.keras.layers.Conv3D(144, [1,1,1], strides=(1,1,1), padding='same')(x4d)\n","\n","branch_14e = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_14e)\n","\n","branch_14e = tf.keras.layers.Activation('relu')(branch_14e)\n","\n","branch_14e = tf.keras.layers.Conv3D(288, [3, 3, 3], strides=(1,1,1), padding='same')(branch_14e)\n","\n","branch_14e = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_14e)\n","\n","branch_14e = tf.keras.layers.Activation('relu')(branch_14e)\n","\n","branch_24e = tf.keras.layers.Conv3D(32, [1,1,1], strides=(1,1,1), padding='same')(x4d)\n","\n","branch_24e = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_24e)\n","\n","branch_24e = tf.keras.layers.Activation('relu')(branch_24e)\n","\n","branch_24e = tf.keras.layers.Conv3D(64, [3, 3, 3], strides=(1,1,1), padding='same')(branch_24e)\n","\n","branch_24e = tf.keras.layers.Activation('relu')(branch_24e)\n","\n","branch_34e = tf.keras.layers.MaxPooling3D((3, 3, 3), strides=(1, 1, 1), padding='same', name='MaxPool2d_4e_3a_3x3')(x4d)\n","\n","branch_34e = tf.keras.layers.Conv3D(64, [1,1,1], strides=(1,1,1), padding='same')(branch_34e)\n","\n","branch_34e = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_34e)\n","\n","branch_34e = tf.keras.layers.Activation('relu')(branch_34e)\n","\n","x4e = tf.keras.layers.concatenate([branch_04e, branch_14e, branch_24e, branch_34e],axis=4)\n","\n","#Mixed_4f\n","\n","branch_04f = tf.keras.layers.Conv3D(256, [1,1,1], strides=(1,1,1), padding='same')(x4e)\n","\n","branch_04f = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_04f)\n","\n","branch_04f = tf.keras.layers.Activation('relu')(branch_04f)\n","\n","branch_14f = tf.keras.layers.Conv3D(160, [1,1,1], strides=(1,1,1), padding='same')(x4e)\n","\n","branch_14f = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_14f)\n","\n","branch_14f = tf.keras.layers.Activation('relu')(branch_14f)\n","\n","branch_14f = tf.keras.layers.Conv3D(320, [3, 3, 3], strides=(1,1,1), padding='same')(branch_14f)\n","\n","branch_14f = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_14f)\n","\n","branch_14f = tf.keras.layers.Activation('relu')(branch_14f)\n","\n","branch_24f = tf.keras.layers.Conv3D(32, [1,1,1], strides=(1,1,1), padding='same')(x4e)\n","\n","branch_24f = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_24f)\n","\n","branch_24f = tf.keras.layers.Activation('relu')(branch_24f)\n","\n","branch_24f = tf.keras.layers.Conv3D(128, [3, 3, 3], strides=(1,1,1), padding='same')(branch_24f)\n","\n","branch_24f = tf.keras.layers.Activation('relu')(branch_24f)\n","\n","branch_34f = tf.keras.layers.MaxPooling3D((3, 3, 3), strides=(1, 1, 1), padding='same', name='MaxPool2d_4f_3a_3x3')(x4e)\n","\n","branch_34f = tf.keras.layers.Conv3D(128, [1,1,1], strides=(1,1,1), padding='same')(branch_34f)\n","\n","branch_34f = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_34f)\n","\n","branch_34f = tf.keras.layers.Activation('relu')(branch_34f)\n","\n","x4f = tf.keras.layers.concatenate([branch_04f, branch_14f, branch_24f,branch_34f],axis=4)\n","\n","#'MaxPool2d_5a_2x2'\n","\n","maxPool4 = tf.keras.layers.MaxPooling3D((2, 2, 2), strides=(2, 2, 2), padding='same')(x4f)\n","\n","#Mixed_5b\n","\n","branch_05b = tf.keras.layers.Conv3D(256, [1,1,1], strides=(1,1,1), padding='same')(maxPool4)\n","\n","branch_05b = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_05b)\n","\n","branch_05b = tf.keras.layers.Activation('relu')(branch_05b)\n","\n","branch_15b = tf.keras.layers.Conv3D(160, [1,1,1], strides=(1,1,1), padding='same')(maxPool4)\n","\n","branch_15b = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_15b)\n","\n","branch_15b = tf.keras.layers.Activation('relu')(branch_15b)\n","\n","branch_15b = tf.keras.layers.Conv3D(320, [3, 3, 3], strides=(1,1,1), padding='same')(branch_15b)\n","\n","branch_15b = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_15b)\n","\n","branch_15b = tf.keras.layers.Activation('relu')(branch_15b)\n","\n","branch_25b = tf.keras.layers.Conv3D(32, [1,1,1], strides=(1,1,1), padding='same')(maxPool4)\n","\n","branch_25b = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_25b)\n","\n","branch_25b = tf.keras.layers.Activation('relu')(branch_25b)\n","\n","branch_25b = tf.keras.layers.Conv3D(128, [3, 3, 3], strides=(1,1,1), padding='same')(branch_25b)\n","\n","branch_25b = tf.keras.layers.Activation('relu')(branch_25b)\n","\n","branch_35b = tf.keras.layers.MaxPooling3D((3, 3, 3), strides=(1, 1, 1), padding='same', name='MaxPool2d_5b_3a_3x3')(maxPool4)\n","\n","branch_35b = tf.keras.layers.Conv3D(128, [1,1,1], strides=(1,1,1), padding='same')(branch_35b)\n","\n","branch_35b = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_35b)\n","\n","branch_35b = tf.keras.layers.Activation('relu')(branch_35b)\n","\n","x5b = tf.keras.layers.concatenate([branch_05b, branch_15b, branch_25b,branch_35b],axis=4)\n","\n","#Mixed_5c\n","\n","branch_05c = tf.keras.layers.Conv3D(384, [1,1,1], strides=(1,1,1), padding='same')(x5b)\n","\n","branch_05c = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_05c)\n","\n","branch_05c = tf.keras.layers.Activation('relu')(branch_05c)\n","\n","branch_15c = tf.keras.layers.Conv3D(192, [1,1,1], strides=(1,1,1), padding='same')(x5b)\n","\n","branch_15c = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_15c)\n","\n","branch_15c = tf.keras.layers.Activation('relu')(branch_15c)\n","\n","branch_15c = tf.keras.layers.Conv3D(384, [3, 3, 3], strides=(1,1,1), padding='same')(branch_15c)\n","\n","branch_15c = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_15c)\n","\n","branch_15c = tf.keras.layers.Activation('relu')(branch_15c)\n","\n","branch_25c = tf.keras.layers.Conv3D(48, [1,1,1], strides=(1,1,1), padding='same')(x5b)\n","\n","branch_25c = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_25c)\n","\n","branch_25c = tf.keras.layers.Activation('relu')(branch_25c)\n","\n","branch_25c = tf.keras.layers.Conv3D(128, [3, 3, 3], strides=(1,1,1), padding='same')(branch_25c)\n","\n","branch_25c = tf.keras.layers.Activation('relu')(branch_25c)\n","\n","branch_35c = tf.keras.layers.MaxPooling3D((3, 3, 3), strides=(1, 1, 1), padding='same', name='MaxPool2d_5c_3a_3x3')(x5b)\n","\n","branch_35c = tf.keras.layers.Conv3D(128, [1,1,1], strides=(1,1,1), padding='same')(branch_35c)\n","\n","branch_35c = tf.keras.layers.BatchNormalization(axis=4, scale=False)(branch_35c)\n","\n","branch_35c = tf.keras.layers.Activation('relu')(branch_35c)\n","\n","x5c = tf.keras.layers.concatenate([branch_05c, branch_15c, branch_25c,branch_35c],axis=4)\n","\n","#AveragePooling\n","\n","avgPool1 = tf.keras.layers.AveragePooling3D((2, 7, 7), strides=(1, 1, 1), padding='same')(x5c)\n","\n","#Conv_1x1\n","\n","convFinal = tf.keras.layers.Conv3D(64, [1,1,1], strides=(1,1,1), padding='same')(avgPool1)\n","\n","convFinal = tf.keras.layers.BatchNormalization(axis=4, scale=False)(convFinal)\n","\n","convFinal = tf.keras.layers.Activation('relu')(convFinal)\n","predictions = tf.keras.layers.Dense(10, activation = 'softmax', name = 'prediction')(convFinal)\n","model = tf.keras.Model(inputs = img_input, outputs = predictions)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"B9j_K3f20TgF","colab_type":"code","colab":{}},"source":["model.compile(optimizer = tf.train.RMSPropOptimizer(0.001), loss = 'categorical_crossentropy', metrics = ['accuracy'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"6JCGx46a0ZH6","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":54},"outputId":"eae7f664-1e58-4d7c-ee4b-df2364ed71f6","executionInfo":{"status":"ok","timestamp":1564522996685,"user_tz":300,"elapsed":13911,"user":{"displayName":"Yogurt 494","photoUrl":"","userId":"00985675351945098911"}}},"source":["npzArray = []\n","for row in data['colA']:\n","  row =  '/content/drive/My Drive/Colab Notebooks/Dhivya_Classifier/videos/' + row.rstrip('/') + '.npz'\n","  npzArray.append(row)\n","  loaded = np.load(row)\n","print(npzArray)"],"execution_count":8,"outputs":[{"output_type":"stream","text":["['/content/drive/My Drive/Colab Notebooks/Dhivya_Classifier/videos/Video_25/RGB/481.npz', '/content/drive/My Drive/Colab Notebooks/Dhivya_Classifier/videos/Video_27/RGB/147.npz', '/content/drive/My Drive/Colab Notebooks/Dhivya_Classifier/videos/Video_30/RGB/299.npz', '/content/drive/My Drive/Colab Notebooks/Dhivya_Classifier/videos/Video_30/RGB/300.npz', '/content/drive/My Drive/Colab Notebooks/Dhivya_Classifier/videos/Video_42/RGB/367.npz', '/content/drive/My Drive/Colab Notebooks/Dhivya_Classifier/videos/Video_42/RGB/395.npz', '/content/drive/My Drive/Colab Notebooks/Dhivya_Classifier/videos/Video_100/RGB/683.npz', '/content/drive/My Drive/Colab Notebooks/Dhivya_Classifier/videos/Video_100/RGB/711.npz', '/content/drive/My Drive/Colab Notebooks/Dhivya_Classifier/videos/Video_791/RGB/478.npz', '/content/drive/My Drive/Colab Notebooks/Dhivya_Classifier/videos/Video_19/RGB/5.npz', '/content/drive/My Drive/Colab Notebooks/Dhivya_Classifier/videos/Video_20/RGB/16.npz', '/content/drive/My Drive/Colab Notebooks/Dhivya_Classifier/videos/Video_20/RGB/19.npz', '/content/drive/My Drive/Colab Notebooks/Dhivya_Classifier/videos/Video_136/RGB/6.npz', '/content/drive/My Drive/Colab Notebooks/Dhivya_Classifier/videos/Video_136/RGB/80.npz', '/content/drive/My Drive/Colab Notebooks/Dhivya_Classifier/videos/Video_137/RGB/128.npz', '/content/drive/My Drive/Colab Notebooks/Dhivya_Classifier/videos/Video_137/RGB/13.npz', '/content/drive/My Drive/Colab Notebooks/Dhivya_Classifier/videos/Video_729/RGB/930.npz', '/content/drive/My Drive/Colab Notebooks/Dhivya_Classifier/videos/Video_25/RGB/450.npz', '/content/drive/My Drive/Colab Notebooks/Dhivya_Classifier/videos/Video_25/RGB/52.npz', '/content/drive/My Drive/Colab Notebooks/Dhivya_Classifier/videos/Video_45/RGB/35.npz', '/content/drive/My Drive/Colab Notebooks/Dhivya_Classifier/videos/Video_310/RGB/470.npz', '/content/drive/My Drive/Colab Notebooks/Dhivya_Classifier/videos/Video_311/RGB/5.npz', '/content/drive/My Drive/Colab Notebooks/Dhivya_Classifier/videos/Video_313/RGB/12.npz', '/content/drive/My Drive/Colab Notebooks/Dhivya_Classifier/videos/Video_313/RGB/42.npz', '/content/drive/My Drive/Colab Notebooks/Dhivya_Classifier/videos/Video_103/RGB/705.npz', '/content/drive/My Drive/Colab Notebooks/Dhivya_Classifier/videos/Video_112/RGB/315.npz', '/content/drive/My Drive/Colab Notebooks/Dhivya_Classifier/videos/Video_116/RGB/163.npz', '/content/drive/My Drive/Colab Notebooks/Dhivya_Classifier/videos/Video_116/RGB/495.npz', '/content/drive/My Drive/Colab Notebooks/Dhivya_Classifier/videos/Video_227/RGB/90.npz', '/content/drive/My Drive/Colab Notebooks/Dhivya_Classifier/videos/Video_228/RGB/145.npz', '/content/drive/My Drive/Colab Notebooks/Dhivya_Classifier/videos/Video_228/RGB/155.npz', '/content/drive/My Drive/Colab Notebooks/Dhivya_Classifier/videos/Video_228/RGB/159.npz']\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"1E-HoYyl0abc","colab_type":"code","colab":{}},"source":["def parse_file(f):\n","  loaded = np.load(f)\n","  return loaded['arr_0']\n","def load_and_preprocess_image(path, label):\n","  var1 = tf.py_func(parse_file, [path], [tf.int64])\n","  return tf.data.Dataset.from_tensor_slices(var1), label"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Kvtn6jSL0mvO","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"486f4e90-9948-4fa4-e6bb-ca166a54aaf7","executionInfo":{"status":"ok","timestamp":1564523004141,"user_tz":300,"elapsed":304,"user":{"displayName":"Yogurt 494","photoUrl":"","userId":"00985675351945098911"}}},"source":["paths = {'paths': npzArray}\n","path_ds = tf.data.Dataset.from_tensor_slices(npzArray)\n","sample = path_ds.take(1)\n","path_ds"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<DatasetV1Adapter shapes: (), types: tf.string>"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"r7Ed5xld0yKb","colab_type":"code","colab":{}},"source":["ds  = tf.data.Dataset.from_tensor_slices((npzArray, data['colB']))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"__u6q31x03LZ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":238},"outputId":"6c0ddfda-c4fb-407e-ac49-055837917d3e","executionInfo":{"status":"ok","timestamp":1564523008348,"user_tz":300,"elapsed":299,"user":{"displayName":"Yogurt 494","photoUrl":"","userId":"00985675351945098911"}}},"source":["image_ds = ds.map(load_and_preprocess_image)"],"execution_count":12,"outputs":[{"output_type":"stream","text":["W0730 21:43:26.506551 140656971237248 deprecation.py:323] From <ipython-input-9-846b1b0d29f8>:5: py_func (from tensorflow.python.ops.script_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","tf.py_func is deprecated in TF V2. Instead, there are two\n","    options available in V2.\n","    - tf.py_function takes a python function which manipulates tf eager\n","    tensors instead of numpy arrays. It's easy to convert a tf eager tensor to\n","    an ndarray (just call tensor.numpy()) but having access to eager tensors\n","    means `tf.py_function`s can use accelerators such as GPUs as well as\n","    being differentiable using a gradient tape.\n","    - tf.numpy_function maintains the semantics of the deprecated tf.py_func\n","    (it is not differentiable, and manipulates numpy arrays). It drops the\n","    stateful argument making all functions stateful.\n","    \n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"Jb4ERlrD08ul","colab_type":"code","colab":{}},"source":["AUTOTUNE = tf.data.experimental.AUTOTUNE\n","image_count = len(npzArray)\n","ds = image_ds.shuffle(buffer_size= image_count)\n","ds = ds.repeat()\n","ds = ds.prefetch(buffer_size=AUTOTUNE)\n","ds\n","image_batch, label_batch = next(iter(ds))\n","logit_batch = model(image_batch).numpy()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"p63ZFD4V1xm_","colab_type":"code","colab":{}},"source":["model.fit(ds, epochs = 1, steps_per_epoch = 3)"],"execution_count":0,"outputs":[]}]}